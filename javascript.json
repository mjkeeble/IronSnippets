{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// 
	// "template":{
	// 	"prefix": "",
	// 	"body": [ (use array if replacement text is over more than one line. put \t at the beginning of lines to be indented)
	// 		"",
	//		 ""
	// 	],
	// 	"description": ""
	// },	
	"for array": {
		"prefix": "4arr",
		"body": [
			"for (let ${1:i} = 0; $1 < ${2:array}.length; $1++) {",
			"\tconst ${3:element} = ${2:array}[$1] ;",
			"\t$0;",
			"}",
		],
		"description": "For loop for array"
	},

	"array.map": {
		"prefix": "arrmap",
		"body": [
			"${1:array}.map(function(${2:arguements}) {",
			"\t${3:code}",
			"\t return ${0:value};",
			"});"
		],
		"description": "array.map method"
	},
	"array.reduce": {
		"prefix": "arrreduce",
		"body": [
			"${1:array}.reduce(function(${2:arguements}) {",
			"\t${3:code}",
			"\t return ${0:value};",
			"});"
		],
		"description": "array.reduce method"
	},

	"array.filter": {
		"prefix": "arrfilter",
		"body": [
			"${1:array}.filter((${2:arguements}) {",
			"\t${3:code}",
			"\t return ${0:value};",
			"});"
		],
		"description": "array.filter method"
	},

	"array.forEach": {
		"prefix": "arr4e",
		"body": [
			"${1:array}forEach(function(${2:arguement}){",
			"\t$0;",
			"});"
		],
		"description": "Array.forEach iteration method"
	},

	"console.log string": {
		"prefix": "sclog",
		"body": [
			"console.log(`$1`);",
			"$2"
		],
		"description": "console.log string in backticks"
	},

	"console.log ": {
		"prefix": "cl",
		"body": [
			"console.log($1);",
			"$2"
		],
		"description": "console.log string"
	},

	"for loop": {
		"prefix": "4loop",
		"body": [
			"for(let ${1:i} = 0; $1 ${2:condition}; $1++) { ",
			"\t${0};",
			"}"
		],
		"description": "for loop"
	},

	"for loop 2d array": {
		"prefix": "4loop2d",
		"body": [
			"for(let ${1:i} = 0; $1 < ${2:array}.length; $1++) { ",
			"\tfor(let ${3:j} = 0; $3 < $2[$1].length; $3++) {",
			"\t\t${0};",
			"\t}",
			"}"
		],
		"description": "2 dimensional for loop"
	},

		"array.sort ascending":{
		"prefix": "sortu",
		"body": [ //(use array if replacement text is over more than one line. put \t at the beginning of lines to be indented)
			"${1:array}.sort(function(${2:a}, ${3:b}) {",
			"\treturn $2 - $3;",
			"});",
			""
		],
		"description": "array.sort ascending"
	},	

		"array.sort descending":{
		"prefix": "sortd",
		"body": [ //(use array if replacement text is over more than one line. put \t at the beginning of lines to be indented)
			"${1:array}.sort(function(${2:a}, ${3:b}) {",
			"\treturn $3 - $2;",
			"});",
			""
		],
		"description": "array.sort descending"
	},	

	// ==================================
	// DOM manipulation functionsbased on https://github.com/madskristensen/JavaScriptSnippetPack
	// ==================================

	"addEventListener": {
		"prefix": "ae",
		"body": [
			"${1:document}.addEventListener('${2:event}', ${3:functionToCall});",
			""
		],
		"description": "Add event listener"
	},

	"getElementByID": {
		"prefix": "gi",
		"body": [
			"${1:document}.getElementById('${2:ID}');",
			""
		],
		"description": "getElementByID"
	},

	"getElementsByClassName": {
		"prefix": "gc",
		"body": [
			"${1:document}.getElementsByClassName('${2:class}');",
			""
		],
		"description": "getElementsByClassName"
	},

	"getElementsByTagName": {
		"prefix": "gt",
		"body": [
			"${1:document}.getElementsByTagName('${2:tag}');",
			""
		],
		"description": "getElementsByTagName"
	},

	"querySelector": {
		"prefix": "qs",
		"body": [
			"${1:document}.querySelector('${2:selectors}');",
			""
		],
		"description": "querySelector"
	},

	"querySelectorAll": {
		"prefix": "qsa",
		"body": [
			"${1:document}.querySelectorAll('${2:selectors}');",
			""
		],
		"description": "querySelectorAll"
	},

	// ==================================
	// Jasmine testing snippets
	// ==================================
	"Jasmine test suite": {
		"prefix": "jassuite",
		"body": [ 
			"describe('${1:Test_suite_description}', function() {",
			"\t// ADD YOUR TESTS HERE",
			"\t$0",
			"",
			"});" //(last line of array shiuld not end with a comma)
		],
		"description": "Initiate test suite"
	},

	"Jasmine test": {
		"prefix": "jastest",
		"body": [ 
			"it('${1:test_description}', function() {",
			"\texpect(${2:test_input}).${3:matcher}(${4:test_output});", // see https://jasmine.github.io/api/edge/matchers.html for list of prefefined matchers
			"});",
			"$0"
		],
		"description": "Define Jasmine test"
	},

	// ==================================
//	To add snippets copy paste and uncomment the template below
		// ==================================
	// "template":{
	// 	"prefix": "",
	// 	"body": [ //(use array if replacement text is over more than one line. put \t at the beginning of lines to be indented)
	// 		"",
	//		 ""
	// 	],
	// 	"description": ""
	// },	


}
